<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	
	xsi:schemaLocation="
	http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/jee https://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 데이터베이스 종류 선택 -->
    <jee:jndi-lookup 
        id="dataSource" 
        jndi-name="jdbc/aws"
        resource-ref="true"/>
	
	<!-- 
		트랜잭션 메니저 선택 (스프링이 지원하는...) 
		사용기술: jdbc 			- DataSourceTransasctionManager 
		사용기술: mybatis 	- DataSourceTransasctionManager
		사용기술: hibernate 	- HibernateTransasctionManager
	-->
	<beans:bean 
		id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/>		
		
	<!-- 스프링에서 트랜잭션을 적용하는 방법은 다음과 같이 두가지 방법이 있다.
			1. 선언적 방법(xml설정) : 
			2. 어노테이션 적용  : <tx: >태그로 등록이 필요하다
	-->			
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<beans:bean 
		id="sqlSessionFactoryBean" 
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:com/edu/zino/mybatis/config.xml"/>
		
	<beans:bean 
		id="sqlSessionTemplate" 
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
	</beans:bean>
	
		<!-- jackson data binder 등록 
		   json 과 자바객체 사이의 자동 변환기(Converter)
	 -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list value-type="java.util.ArrayList">
				<beans:ref bean="mappingJackson2HttpMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
		 
	<beans:bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		 <beans:property name="supportedMediaTypes">
			<beans:value>application/json;charset=utf-8</beans:value>		 	
		 </beans:property>	
	</beans:bean>	
	
	<context:component-scan base-package="com.edu.zino.model" />
	
	
	<!-- 구글 로그인 관련 정보 등록  -->
 	<beans:bean id="googleLogin" class="com.edu.zino.snslogin.GoogleLogin">
 		<!-- 1)인증화면 관련 링크 -->
 		<!-- 인증된 링크 -->
 		<beans:property name="endpoint" value="https://accounts.google.com/o/oauth2/v2/auth"></beans:property>
 	
		<!-- google cloud platform에서 발급받은 client ID-->
		<beans:property name="client_id" value="1089278232541-00umasat1splftrqld2k8k8coc7kmj5l.apps.googleusercontent.com"/>
		
		<!-- google cloud platform에서 발급받은 client Secret--> 		
		<beans:property name="client_secret" value="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"/> 		
		
		<!-- Resource Owner 가 인증할때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:7777/sns/google/callback"/>
 	
 		<!-- callback 받을 때 구글이 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"/>
 		
		<!-- Resource Owner 로부터 어떠한 정보를 수집할지 그 범위설정  -->
		<beans:property name="scope" value="https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"/>
 	
 	
 		<!-- 2)토큰요청 관련 링크 -->	
 		<beans:property name="token_request_url" value="https://oauth2.googleapis.com/token"/>
 		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"/>
 		
 		<!-- 3) 회원정보 요청을 위한 url-->
 		<beans:property name="userinfo_url" value="https://www.googleapis.com/oauth2/v1/userinfo"></beans:property>	
 			
 	</beans:bean>
 	
 	
	<!-- 카카오 로그인 관련 정보 등록  -->
 	<beans:bean id="kaKaoLogin" class="com.edu.zino.snslogin.KaKaoLogin">
 		<!-- 1)인증화면 관련 링크 -->
 		<!-- 인증된 링크 -->
 		<beans:property name="endpoint" value="https://kauth.kakao.com/oauth/authorize"/>
 	
		<!-- google cloud platform에서 발급받은 client ID-->
		<beans:property name="client_id" value="fde446aa072ea223b950992b4fd01752"/>
		
		<!-- Resource Owner 가 인증할때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:7777/sns/kakao/callback"/>
 	
 		<!-- callback 받을 때 구글이 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"/>
 		<!-- 카카오는 scope 없음 -->
 		
 		<!-- 2)토큰요청 관련 링크 -->	
 		<beans:property name="token_request_url" value="https://kauth.kakao.com/oauth/token"/>
 		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"/>
 		
 		<!-- 3) 회원정보 요청을 위한 url-->
 		<beans:property name="userinfo_url" value="https://kapi.kakao.com/v2/user/me"></beans:property>	
 			
 	</beans:bean>
 	
 	
 	<!-- 네이버 로그인 관련 정보 등록  -->
 	<beans:bean id="naverLogin" class="com.edu.zino.snslogin.NaverLogin">
 		<!-- 1)인증화면 관련 링크 -->
 		<!-- 인증된 링크 -->
 		<beans:property name="endpoint" value="https://nid.naver.com/oauth2.0/authorize"/>
 	
		<!-- naver cloud platform에서 발급받은 client ID-->
		<beans:property name="client_id" value="4wyQ2K69KqSDUV89vJI4"/>
		
		<!-- naver cloud platform에서 발급받은 client Secret--> 		
		<beans:property name="client_secret" value="1jxdBWuUbc"/> 
		
		<!-- Resource Owner 가 인증할때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:7777/sns/naver/callback"/>
 	
 		<!-- callback 받을 때 구글이 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"/>
 		<!-- naver state -->
 		<beans:property name="state" value="naver_login_by_doky"/>
 		
 		<!-- 2)토큰요청 관련 링크 -->	
 		<beans:property name="token_request_url" value="https://nid.naver.com/oauth2.0/token"/>
 		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"/>
 		
 		
 		<!-- 3) 회원정보 요청을 위한 url-->
 		<beans:property name="userinfo_url" value="https://openapi.naver.com/v1/nid/me"></beans:property>	
 			
 	</beans:bean>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
		
</beans:beans>
